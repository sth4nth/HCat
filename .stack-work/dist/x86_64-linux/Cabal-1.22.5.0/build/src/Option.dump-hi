
==================== FINAL INTERFACE ====================
2016-07-15 03:15:49.980017 UTC

interface HCat_Iq2DAKyrbvk3ZKEqDv7U6O:Option 7103
  interface hash: fdcf71c7f2fd92ad7f20ff2410794233
  ABI hash: 6c4903f446620f09068c93f5e9b80850
  export-list hash: ccf8fb4cbf1a285cb4a338d4b9289171
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Option.Option{Option.None Option.Some}
module dependencies: Category
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Category d04fadc7369dd940e4360945d36cdfed
  exports: 81374d22835f40785af1b606622eb5f1
  Applicatives c5a9990fdc5f7d66c3d1870a791424e7
  Functors 0c99107d0b164aa3ab215e2e9d84eaab
  Monads 85dcc97e6230fce5f7ba3f8ac5666970
  Monoids 78c00219dd189b6034ab42aed4f3eb64
  Semigroups 3dc1f6eefa8d24cdc0d8ab6c8106e43a
  append 726eb8d456c74b87ebc1fd5ba803d7e7
  bind 26232894ba5c27845dc414b23b94ae56
  deploy 47a21a94494a3612505094fbdc8bb840
  empty 2a9b254d77ca52aa2892f66cf10fa8d7
  join 7aa51fc5e18af370596166649fa41894
  lift f49e3ca94f9a5b39fbdda534365cd879
  unit 1d2fafe2f03031bfdd664393f1f14b95
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
a40425628613bdb859cb3b3afa78c21e
  $fApplicativesOption :: Category.Applicatives Option.Option
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Option.Option
                  Option.$fApplicativesOption_$clift
                    `cast`
                  (Sym (Category.NTCo:Functors[0] <Option.Option>_N))
                  Option.Some
                  Option.$fApplicativesOption_$cdeploy -}
a40425628613bdb859cb3b3afa78c21e
  $fApplicativesOption_$cdeploy ::
    Option.Option (a -> b) -> Option.Option a -> Option.Option b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b ds :: Option.Option (a -> b) ds1 :: Option.Option a ->
                 case ds of wild {
                   Option.None -> Option.None @ b
                   Option.Some f
                   -> Option.$fApplicativesOption_$clift @ a @ b f ds1 }) -}
a40425628613bdb859cb3b3afa78c21e
  $fApplicativesOption_$clift ::
    (a -> b) -> Option.Option a -> Option.Option b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b ds :: a -> b ds1 :: Option.Option a ->
                 case ds1 of wild {
                   Option.None -> Option.None @ b
                   Option.Some a1 -> Option.Some @ b (ds a1) }) -}
a40425628613bdb859cb3b3afa78c21e
  $fEqOption :: GHC.Classes.Eq a => GHC.Classes.Eq (Option.Option a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Option.Option a)
                  (Option.$fEqOption_$c== @ a $dEq)
                  (Option.$fEqOption_$c/= @ a $dEq) -}
a40425628613bdb859cb3b3afa78c21e
  $fEqOption_$c/= ::
    GHC.Classes.Eq a =>
    Option.Option a -> Option.Option a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   a1 :: Option.Option a
                   b :: Option.Option a ->
                 case a1 of wild {
                   Option.None
                   -> case b of wild1 {
                        Option.None -> GHC.Types.False Option.Some ipv -> GHC.Types.True }
                   Option.Some a2
                   -> case b of wild1 {
                        Option.None -> GHC.Types.True
                        Option.Some b1
                        -> case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a40425628613bdb859cb3b3afa78c21e
  $fEqOption_$c== ::
    GHC.Classes.Eq a =>
    Option.Option a -> Option.Option a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   ds :: Option.Option a
                   ds1 :: Option.Option a ->
                 case ds of wild {
                   Option.None
                   -> case ds1 of wild1 {
                        Option.None -> GHC.Types.True Option.Some ipv -> GHC.Types.False }
                   Option.Some a1
                   -> case ds1 of wild1 {
                        Option.None -> GHC.Types.False
                        Option.Some b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
a40425628613bdb859cb3b3afa78c21e
  $fFunctorsOption :: Category.Functors Option.Option
  DFunId[0]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Option.$fApplicativesOption_$clift
                  `cast`
                (Sym (Category.NTCo:Functors[0] <Option.Option>_N)) -}
a40425628613bdb859cb3b3afa78c21e
  $fMonadsOption :: Category.Monads Option.Option
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Option.Option
                  Option.$fApplicativesOption
                  Option.$fMonadsOption_$cjoin
                  Option.$fMonadsOption_$cbind -}
a40425628613bdb859cb3b3afa78c21e
  $fMonadsOption_$cbind ::
    Option.Option a -> (a -> Option.Option b) -> Option.Option b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b ds :: Option.Option a ds1 :: a -> Option.Option b ->
                 case ds of wild {
                   Option.None -> Option.None @ b Option.Some a1 -> ds1 a1 }) -}
a40425628613bdb859cb3b3afa78c21e
  $fMonadsOption_$cjoin ::
    Option.Option (Option.Option a) -> Option.Option a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: Option.Option (Option.Option a) ->
                 case ds of wild {
                   Option.None -> Option.None @ a Option.Some a1 -> a1 }) -}
a40425628613bdb859cb3b3afa78c21e
  $fMonoidsOption ::
    (Category.Semigroups (Option.Option a), Category.Semigroups a) =>
    Category.Monoids (Option.Option a)
  DFunId[1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dSemigroups :: Category.Semigroups (Option.Option a)
                      $dSemigroups1 :: Category.Semigroups a.
                  @ (Option.Option a)
                  $dSemigroups
                  (Option.$fMonoidsOption_$cempty @ a $dSemigroups $dSemigroups1) -}
a40425628613bdb859cb3b3afa78c21e
  $fMonoidsOption_$cempty ::
    (Category.Semigroups (Option.Option a), Category.Semigroups a) =>
    Option.Option a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   $dSemigroups :: Category.Semigroups (Option.Option a)
                   $dSemigroups1 :: Category.Semigroups a ->
                 Option.None @ a) -}
a40425628613bdb859cb3b3afa78c21e
  $fSemigroupsOption ::
    Category.Semigroups a => Category.Semigroups (Option.Option a)
  DFunId[0]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Option.$fSemigroupsOption_$cappend
                  `cast`
                (forall a.
                 <Category.Semigroups a>_R
                 ->_R Sym (Category.NTCo:Semigroups[0] <Option.Option a>_N)) -}
a40425628613bdb859cb3b3afa78c21e
  $fSemigroupsOption_$cappend ::
    Category.Semigroups a =>
    Option.Option a -> Option.Option a -> Option.Option a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dSemigroups :: Category.Semigroups a
                   ds :: Option.Option a
                   a1 :: Option.Option a ->
                 case ds of wild {
                   Option.None -> a1
                   Option.Some ipv
                   -> case a1 of wild1 {
                        Option.None -> wild
                        Option.Some ipv1
                        -> Option.Some
                             @ a
                             ($dSemigroups `cast` (Category.NTCo:Semigroups[0] <a>_N)
                                ipv
                                ipv1) } }) -}
a40425628613bdb859cb3b3afa78c21e
  $fShowOption :: GHC.Show.Show a => GHC.Show.Show (Option.Option a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Option.Option a)
                  (Option.$fShowOption_$cshowsPrec @ a $dShow)
                  (Option.$fShowOption_$cshow @ a $dShow)
                  (Option.$fShowOption_$cshowList @ a $dShow) -}
9211f6bbdb2234d038edd4a3e4f6745f
  $fShowOption1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
db9ca4c915b4425afac2afdfbdbd9538
  $fShowOption2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Some "#) -}
ff06ad53f9481f3d56331e11965e2608
  $fShowOption3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
f4ee404e4063439248646162af8f057c
  $fShowOption4 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Option.$fShowOption5) -}
7fb2cf424444d2a8d56336164e8e21b1
  $fShowOption5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "None"#) -}
a40425628613bdb859cb3b3afa78c21e
  $fShowOption_$cshow ::
    GHC.Show.Show a => Option.Option a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a $dShow :: GHC.Show.Show a x :: Option.Option a ->
                 case x of wild {
                   Option.None -> Option.$fShowOption5
                   Option.Some b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Option.$fShowOption2
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Option.$fShowOption3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
a40425628613bdb859cb3b3afa78c21e
  $fShowOption_$cshowList ::
    GHC.Show.Show a => [Option.Option a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Option.Option a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Option.Option a)
                   (Option.$fShowOption_$cshowsPrec @ a $dShow Option.$fShowOption1)
                   eta
                   eta1) -}
a40425628613bdb859cb3b3afa78c21e
  $fShowOption_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Option.Option a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   $dShow :: GHC.Show.Show a
                   ds :: GHC.Types.Int
                   ds1 :: Option.Option a ->
                 case ds1 of wild {
                   Option.None -> Option.$fShowOption4
                   Option.Some b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow Option.$fShowOption3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char Option.$fShowOption2 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Option.$fShowOption2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
a40425628613bdb859cb3b3afa78c21e
  data Option a = None | Some a
    Promotable
instance Category.Applicatives [Option.Option]
  = Option.$fApplicativesOption
instance GHC.Classes.Eq [Option.Option] = Option.$fEqOption
instance Category.Functors [Option.Option]
  = Option.$fFunctorsOption
instance Category.Monads [Option.Option] = Option.$fMonadsOption
instance Category.Monoids [Option.Option] = Option.$fMonoidsOption
instance Category.Semigroups [Option.Option]
  = Option.$fSemigroupsOption
instance GHC.Show.Show [Option.Option] = Option.$fShowOption
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

