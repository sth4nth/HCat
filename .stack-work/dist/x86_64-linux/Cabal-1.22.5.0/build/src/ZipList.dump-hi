
==================== FINAL INTERFACE ====================
2016-07-15 03:15:50.071444 UTC

interface HCat_Iq2DAKyrbvk3ZKEqDv7U6O:ZipList 7103
  interface hash: 01e46474dab7a3e09c0f9117a0348d5b
  ABI hash: 091af389ab5029909e9f34c0ac4d1f22
  export-list hash: 92872d3152a26fe28ac40ba49434c54b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  ZipList.ZipList{ZipList.ZipList}
module dependencies: Category
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Category d04fadc7369dd940e4360945d36cdfed
  exports: 81374d22835f40785af1b606622eb5f1
  Applicatives c5a9990fdc5f7d66c3d1870a791424e7
  Functors 0c99107d0b164aa3ab215e2e9d84eaab
  Monoids 78c00219dd189b6034ab42aed4f3eb64
  Semigroups 3dc1f6eefa8d24cdc0d8ab6c8106e43a
  append 726eb8d456c74b87ebc1fd5ba803d7e7
  deploy 47a21a94494a3612505094fbdc8bb840
  empty 2a9b254d77ca52aa2892f66cf10fa8d7
  lift f49e3ca94f9a5b39fbdda534365cd879
  unit 1d2fafe2f03031bfdd664393f1f14b95
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
d555fb0d51729f3b83d93ac309c9fd13
  $fApplicativesZipList :: Category.Applicatives ZipList.ZipList
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ZipList.ZipList
                  ZipList.$fApplicativesZipList_$clift
                    `cast`
                  (Sym (Category.NTCo:Functors[0] <ZipList.ZipList>_N))
                  ZipList.$fApplicativesZipList_$cunit
                  ZipList.$fApplicativesZipList_$cdeploy -}
d555fb0d51729f3b83d93ac309c9fd13
  $fApplicativesZipList1 ::
    ZipList.ZipList (a -> b) -> ZipList.ZipList a -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ds :: ZipList.ZipList (a -> b)
                   ds1 :: ZipList.ZipList a ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 c1 :: b -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                    GHC.List.foldr2
                      @ (a -> b)
                      @ a
                      @ b1
                      (GHC.List.zipWithFB
                         @ b
                         @ b1
                         @ b1
                         @ (a -> b)
                         @ a
                         c1
                         (GHC.Base.$ @ a @ b))
                      n
                      ds `cast` (ZipList.NTCo:ZipList[0] <a -> b>_N)
                      ds1 `cast` (ZipList.NTCo:ZipList[0] <a>_N))) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fApplicativesZipList_$cdeploy ::
    ZipList.ZipList (a -> b) -> ZipList.ZipList a -> ZipList.ZipList b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                ZipList.$fApplicativesZipList1
                  `cast`
                (forall a b.
                 <ZipList.ZipList (a -> b)>_R
                 ->_R <ZipList.ZipList a>_R
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <b>_N) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fApplicativesZipList_$clift ::
    (a -> b) -> ZipList.ZipList a -> ZipList.ZipList b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.map
                  `cast`
                (forall a b.
                 <a -> b>_R
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <a>_N
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <b>_N) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fApplicativesZipList_$cunit :: a -> ZipList.ZipList a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.List.repeat
                  `cast`
                (forall a. <a>_R ->_R Sym (ZipList.NTCo:ZipList[0]) <a>_N) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fFunctorsZipList :: Category.Functors ZipList.ZipList
  DFunId[0]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                ZipList.$fApplicativesZipList_$clift
                  `cast`
                (Sym (Category.NTCo:Functors[0] <ZipList.ZipList>_N)) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fMonoidsZipList ::
    Category.Semigroups (ZipList.ZipList a) =>
    Category.Monoids (ZipList.ZipList a)
  DFunId[1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dSemigroups :: Category.Semigroups (ZipList.ZipList a).
                  @ (ZipList.ZipList a)
                  $dSemigroups
                  (ZipList.$fMonoidsZipList_$cempty @ a $dSemigroups) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fMonoidsZipList1 :: Category.Semigroups (ZipList.ZipList a) => [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a $dSemigroups :: Category.Semigroups (ZipList.ZipList a) ->
                 GHC.Types.[] @ a) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fMonoidsZipList_$cempty ::
    Category.Semigroups (ZipList.ZipList a) => ZipList.ZipList a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                ZipList.$fMonoidsZipList1
                  `cast`
                (forall a.
                 <Category.Semigroups (ZipList.ZipList a)>_R
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <a>_N) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fSemigroupsZipList :: Category.Semigroups (ZipList.ZipList a)
  DFunId[0]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                ZipList.$fSemigroupsZipList_$cappend
                  `cast`
                (forall a.
                 Sym (Category.NTCo:Semigroups[0] <ZipList.ZipList a>_N)) -}
d555fb0d51729f3b83d93ac309c9fd13
  $fSemigroupsZipList_$cappend ::
    ZipList.ZipList a -> ZipList.ZipList a -> ZipList.ZipList a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.++
                  `cast`
                (forall a.
                 Sym (ZipList.NTCo:ZipList[0]) <a>_N
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <a>_N
                 ->_R Sym (ZipList.NTCo:ZipList[0]) <a>_N) -}
d555fb0d51729f3b83d93ac309c9fd13
  newtype ZipList a = ZipList [a]
    Promotable
instance Category.Applicatives [ZipList.ZipList]
  = ZipList.$fApplicativesZipList
instance Category.Functors [ZipList.ZipList]
  = ZipList.$fFunctorsZipList
instance Category.Monoids [ZipList.ZipList]
  = ZipList.$fMonoidsZipList
instance Category.Semigroups [ZipList.ZipList]
  = ZipList.$fSemigroupsZipList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

